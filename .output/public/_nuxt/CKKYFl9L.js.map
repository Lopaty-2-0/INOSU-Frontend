{"version":3,"file":"CKKYFl9L.js","sources":["../../../../stores/alerts.ts","../../../../components/Alerts.vue"],"sourcesContent":["import { acceptHMRUpdate, defineStore } from \"pinia\";\n\ninterface Alert {\n    index?: number,\n    type: \"success\" | \"error\" | \"warning\" | \"info\",\n    title: string,\n    message: string\n}\n\nexport const useAlertsStore = defineStore(\"alerts\", {\n    state: () => ({\n        alerts: [] as Alert[],\n        defaultAlertTimeout: 5000\n    }),\n    getters: {\n        getAlerts(): Alert[] {\n            return this.alerts;\n        }\n    },\n    actions: {\n        addAlert(alert: Alert): void {\n            // Find max alert index from alerts and add 1 for the new index\n            let maxIndex: number = 0;\n            this.alerts.map((alert) => {\n                if (alert.index && alert.index > maxIndex) maxIndex = alert.index;\n            });\n\n            this.alerts = [...this.alerts, { index: maxIndex + 1, ...alert }];\n\n            // Remove the alert after the default timeout\n            setTimeout(() => {\n                this.removeAlert(maxIndex + 1);\n            }, this.defaultAlertTimeout);\n        },\n        removeAlert(alertIndex: number): void {\n            // Find the index of the alert to remove (if there are multiple stores with the same index, they will be removed sequentially, because it always finds the 1st element with that index)\n            const index: number = this.alerts.findIndex(alert => alert.index === alertIndex);\n\n            // If the alert is found, remove it\n            if (index !== -1) {\n                const updatedAlerts: Alert[] = [...this.alerts];\n                updatedAlerts.splice(index, 1);\n\n                this.alerts = updatedAlerts;\n            }\n        }\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n","<script setup lang=\"ts\">\nimport { useAlertsStore } from \"../stores/alerts\";\nimport { storeToRefs } from \"pinia\";\n\nconst alertsStore = useAlertsStore();\nconst { getAlerts: alerts } = storeToRefs(alertsStore);\n\nconst removeAlert = (index?: number): void => {\n  if (index) alertsStore.removeAlert(index);\n};\n</script>\n\n<template>\n  <div id=\"alerts\">\n    <div\n      v-for=\"(alert, index) in alerts\"\n      :key=\"index\"\n      class=\"alert\"\n      :class=\"alert.type\"\n    >\n      <div class=\"content\">\n        <span>{{ alert.title }}</span>\n        <p>{{ alert.message }}</p>\n      </div>\n\n      <Icon\n        class=\"icon\"\n        size=\"24px\"\n        name=\"material-symbols:close-rounded\"\n        @click=\"removeAlert(alert.index)\"\n      ></Icon>\n    </div>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n#alerts {\n  position: fixed;\n  top: 80px;\n  right: 0;\n  margin: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  justify-content: flex-start;\n  align-items: flex-end;\n  z-index: 10;\n  max-height: 300px;\n  width: fit-content;\n  padding-right: 10px;\n  overflow: auto;\n\n  &::-webkit-scrollbar {\n    width: 3px;\n  }\n\n  .alert {\n    border-radius: var(--normal-border-radius);\n    outline: none;\n    padding: 20px;\n    min-width: 400px;\n    max-width: 600px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n\n    .content {\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n      justify-content: flex-start;\n\n      span {\n        font-size: 16px;\n        font-weight: bold;\n      }\n\n      p {\n        font-size: 16px;\n        color: var(--alert-description-color);\n      }\n    }\n\n    .icon {\n      cursor: pointer;\n      color: var(--alert-description-color);\n      transition: 0.2s;\n\n      &:hover {\n        opacity: 0.7;\n      }\n    }\n\n    &.success {\n      background: var(--alert-success-background);\n\n      .content span {\n        color: var(--alert-success-color);\n      }\n    }\n    &.error {\n      background: var(--alert-error-background);\n\n      .content span {\n        color: var(--alert-error-color);\n      }\n    }\n    &.warning {\n      background: var(--alert-warning-background);\n\n      .content span {\n        color: var(--alert-warning-color);\n      }\n    }\n    &.info {\n      background: var(--alert-info-background);\n\n      .content span {\n        color: var(--alert-info-color);\n      }\n    }\n  }\n}\n</style>\n"],"names":["useAlertsStore","defineStore","alert","maxIndex","alertIndex","index","updatedAlerts","alertsStore","alerts","storeToRefs","removeAlert"],"mappings":"oJASa,MAAAA,EAAiBC,EAAY,SAAU,CAChD,MAAO,KAAO,CACV,OAAQ,CAAC,EACT,oBAAqB,GAAA,GAEzB,QAAS,CACL,WAAqB,CACjB,OAAO,KAAK,MAAA,CAEpB,EACA,QAAS,CACL,SAASC,EAAoB,CAEzB,IAAIC,EAAmB,EAClB,KAAA,OAAO,IAAKD,GAAU,CACnBA,EAAM,OAASA,EAAM,MAAQC,MAAqBD,EAAM,MAAA,CAC/D,EAEI,KAAA,OAAS,CAAC,GAAG,KAAK,OAAQ,CAAE,MAAOC,EAAW,EAAG,GAAGD,EAAO,EAGhE,WAAW,IAAM,CACR,KAAA,YAAYC,EAAW,CAAC,CAAA,EAC9B,KAAK,mBAAmB,CAC/B,EACA,YAAYC,EAA0B,CAE5B,MAAAC,EAAgB,KAAK,OAAO,UAAmBH,GAAAA,EAAM,QAAUE,CAAU,EAG/E,GAAIC,IAAU,GAAI,CACd,MAAMC,EAAyB,CAAC,GAAG,KAAK,MAAM,EAChCA,EAAA,OAAOD,EAAO,CAAC,EAE7B,KAAK,OAASC,CAAA,CAClB,CACJ,CAER,CAAC,oEC3CD,MAAMC,EAAcP,EAAe,EAC7B,CAAE,UAAWQ,GAAWC,EAAYF,CAAW,EAE/CG,EAAeL,GAAyB,CACxCA,GAAmBE,EAAA,YAAYF,CAAK,CAC1C"}