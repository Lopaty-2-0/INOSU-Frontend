{"version":3,"file":"aLrP6maY.js","sources":["../../../../components/manage/Name.vue","../../../../components/manage/NeedApprove.vue","../../../../components/manage/DateTime.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport {ref, watch} from \"vue\";\r\n\r\nconst props = defineProps({\r\n  oldName: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  reset: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n});\r\n\r\nconst emits = defineEmits([\"update\"]);\r\nconst name = ref<{ input: string, updated: boolean }>({ input: props.oldName, updated: false });\r\n\r\nconst onInput = () => {\r\n  name.value.updated = name.value.input !== \"\" && name.value.input !== props.oldName;\r\n\r\n  emits(\"update\", name.value.updated ? name.value.input : undefined);\r\n};\r\n\r\nwatch(() => props.reset, (reset: boolean) => {\r\n  if (reset) {\r\n    name.value.updated = false;\r\n    name.value.input = props.oldName;\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"section\">\r\n    <slot />\r\n\r\n    <div class=\"items name\">\r\n      <div class=\"section\">\r\n        <div class=\"content\">\r\n          <label for=\"name\">Název</label>\r\n          <input type=\"text\" id=\"name\" name=\"name\" :placeholder=\"props.oldName ? props.oldName : 'Úkol 1'\" v-model=\"name.input\" @input=\"onInput\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 30px;\r\n  width: 100%;\r\n\r\n  .update {\r\n    color: rgba(var(--error-color), 1);\r\n  }\r\n\r\n  .line {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    flex-wrap: wrap;\r\n\r\n    input {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .items {\r\n    display: flex;\r\n    gap: 30px;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: flex-start;\r\n\r\n    .section {\r\n      display: flex;\r\n      flex-direction: row;\r\n      gap: 20px;\r\n      flex: 1;\r\n      align-items: flex-end;\r\n\r\n      .content {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 10px;\r\n\r\n        label {\r\n          color: var(--mini-title-color);\r\n          font-size: 16px;\r\n          font-weight: 500;\r\n          cursor: pointer;\r\n        }\r\n\r\n        input {\r\n          border-radius: var(--normal-border-radius);\r\n          font-size: 16px;\r\n          outline: none;\r\n          padding: 15px;\r\n          border: var(--border-width) solid rgba(var(--border-color), 0.5);\r\n          min-width: 150px;\r\n          background: var(--input-background);\r\n          color: var(--input-color);\r\n\r\n          &:focus {\r\n            border-color: rgba(var(--main-color), 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>","<script setup lang=\"ts\">\r\nimport {ref, watch} from \"vue\";\r\n\r\nconst props = defineProps({\r\n  oldCheck: {\r\n    type: [Boolean, null] as PropType<boolean | null>,\r\n    required: false,\r\n  },\r\n  reset: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n});\r\n\r\nconst emits = defineEmits([\"update\"]);\r\nconst check = ref<{ input: boolean, updated: boolean }>({\r\n  input: props.oldCheck && props.oldCheck !== null ? props.oldCheck : false,\r\n  updated: false\r\n});\r\n\r\nconst onInput = () => {\r\n  check.value.updated = props.oldCheck === null ? true : check.value.input !== props.oldCheck;\r\n\r\n  emits(\"update\", check.value.updated ? check.value.input : undefined);\r\n};\r\n\r\nwatch(() => props.reset, (reset: boolean): void => {\r\n  if (reset) {\r\n    check.value.updated = false;\r\n    check.value.input = props.oldCheck && props.oldCheck !== null ? props.oldCheck : false;\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"section\">\r\n    <slot />\r\n\r\n    <div class=\"items needApprove\">\r\n      <div class=\"section\">\r\n        <div class=\"content\">\r\n          <input type=\"checkbox\" id=\"needApprove\" name=\"needApprove\" :value=\"props.oldCheck\" v-model=\"check.input\" @change=\"onInput\">\r\n          <label for=\"needApprove\">Nutné schválení</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 30px;\r\n  width: 100%;\r\n\r\n  .update {\r\n    color: rgba(var(--error-color), 1);\r\n  }\r\n\r\n  .line {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    flex-wrap: wrap;\r\n\r\n    input {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .items {\r\n    display: flex;\r\n    gap: 30px;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: flex-start;\r\n\r\n    .section {\r\n      display: flex;\r\n      flex-direction: row;\r\n      gap: 20px;\r\n      flex: 1;\r\n      align-items: flex-end;\r\n\r\n      .content {\r\n        display: flex;\r\n        flex-direction: row;\r\n        gap: 10px;\r\n        align-items: center;\r\n\r\n        input[type=\"checkbox\"] {\r\n          accent-color: rgba(var(--main-color), 1);\r\n          height: 15px;\r\n          width: 15px;\r\n          border-radius: var(--mini-border-radius);\r\n          cursor: pointer;\r\n        }\r\n\r\n        label {\r\n          color: var(--mini-title-color);\r\n          font-size: 16px;\r\n          font-weight: 500;\r\n          cursor: pointer;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>","<script setup lang=\"ts\">\r\nimport {ref, watch} from \"vue\";\r\n\r\nconst props = defineProps({\r\n  label: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  oldDate: {\r\n    type: [Date, null] as PropType<Date | null>,\r\n    required: true,\r\n  },\r\n  reset: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n});\r\n\r\nconst emits = defineEmits([\"update\"]);\r\nconst date = ref<{ input: Date | null, updated: boolean }>({ input: props.oldDate, updated: false });\r\n\r\nwatch(() => props.reset, (reset: boolean) => {\r\n  if (reset) {\r\n    date.value.updated = false;\r\n    date.value.input = props.oldDate;\r\n  }\r\n});\r\n\r\nwatch(() => date.value.input, () => {\r\n  date.value.updated = !!(date.value.input && date.value.input.getTime() !== props.oldDate?.getTime());\r\n\r\n  emits(\"update\", date.value.updated ? date.value.input : undefined);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"section\">\r\n    <slot />\r\n\r\n    <div class=\"items dateTime\">\r\n      <div class=\"section\">\r\n        <div class=\"content\">\r\n          <label for=\"dateTime\">{{ props.label ? props.label : \"Datum a čas\" }} <span class=\"update\" v-show=\"date.updated\">(aktualizováno)</span></label>\r\n          <VDatePicker expanded transparent bordeless v-model=\"date.input\" mode=\"dateTime\" hide-time-header is24hr />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n@use \"../../assets/style/calendar\";\r\n\r\n.section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 30px;\r\n  width: 100%;\r\n\r\n  .update {\r\n    color: rgba(var(--error-color), 1);\r\n  }\r\n\r\n  .line {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    flex-wrap: wrap;\r\n\r\n    input {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .items {\r\n    display: flex;\r\n    gap: 30px;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: flex-start;\r\n\r\n    .section {\r\n      display: flex;\r\n      flex-direction: row;\r\n      gap: 20px;\r\n      flex: 1;\r\n      align-items: flex-end;\r\n\r\n      .content {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 10px;\r\n\r\n        label {\r\n          color: var(--mini-title-color);\r\n          font-size: 16px;\r\n          font-weight: 500;\r\n          cursor: pointer;\r\n        }\r\n\r\n        input {\r\n          border-radius: var(--normal-border-radius);\r\n          font-size: 16px;\r\n          outline: none;\r\n          padding: 15px;\r\n          border: var(--border-width) solid rgba(var(--border-color), 0.5);\r\n          min-width: 150px;\r\n          background: var(--input-background);\r\n          color: var(--input-color);\r\n\r\n          &:focus {\r\n            border-color: rgba(var(--main-color), 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>"],"names":["props","__props","emits","__emit","name","ref","onInput","watch","reset","check","date","_a"],"mappings":"4WAGA,MAAMA,EAAQC,EAWRC,EAAQC,EACRC,EAAOC,EAAyC,CAAE,MAAOL,EAAM,QAAS,QAAS,GAAO,EAExFM,EAAU,IAAM,CACfF,EAAA,MAAM,QAAUA,EAAK,MAAM,QAAU,IAAMA,EAAK,MAAM,QAAUJ,EAAM,QAE3EE,EAAM,SAAUE,EAAK,MAAM,QAAUA,EAAK,MAAM,MAAQ,MAAS,CACnE,EAEA,OAAAG,EAAM,IAAMP,EAAM,MAAQQ,GAAmB,CACvCA,IACFJ,EAAK,MAAM,QAAU,GAChBA,EAAA,MAAM,MAAQJ,EAAM,QAC3B,CACD,inBCzBD,MAAMA,EAAQC,EAWRC,EAAQC,EACRM,EAAQJ,EAA0C,CACtD,MAAOL,EAAM,UAAYA,EAAM,WAAa,KAAOA,EAAM,SAAW,GACpE,QAAS,EAAA,CACV,EAEKM,EAAU,IAAM,CACdG,EAAA,MAAM,QAAUT,EAAM,WAAa,KAAO,GAAOS,EAAM,MAAM,QAAUT,EAAM,SAEnFE,EAAM,SAAUO,EAAM,MAAM,QAAUA,EAAM,MAAM,MAAQ,MAAS,CACrE,EAEA,OAAAF,EAAM,IAAMP,EAAM,MAAQQ,GAAyB,CAC7CA,IACFC,EAAM,MAAM,QAAU,GAChBA,EAAA,MAAM,MAAQT,EAAM,UAAYA,EAAM,WAAa,KAAOA,EAAM,SAAW,GACnF,CACD,6qBC5BD,MAAMA,EAAQC,EAeRC,EAAQC,EACRO,EAAOL,EAA8C,CAAE,MAAOL,EAAM,QAAS,QAAS,GAAO,EAEnG,OAAAO,EAAM,IAAMP,EAAM,MAAQQ,GAAmB,CACvCA,IACFE,EAAK,MAAM,QAAU,GAChBA,EAAA,MAAM,MAAQV,EAAM,QAC3B,CACD,EAEDO,EAAM,IAAMG,EAAK,MAAM,MAAO,IAAM,OAClCA,EAAK,MAAM,QAAU,CAAC,EAAEA,EAAK,MAAM,OAASA,EAAK,MAAM,MAAM,QAAA,MAAcC,EAAAX,EAAM,UAAN,YAAAW,EAAe,YAE1FT,EAAM,SAAUQ,EAAK,MAAM,QAAUA,EAAK,MAAM,MAAQ,MAAS,CAAA,CAClE"}